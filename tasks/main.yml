---
- name: set vars
  set_fact:
    docker_image: '{{ role_grafana_image }}'
    docker_container: '{{ role_grafana_container }}'
    docker_volume_config: '{{ role_grafana_volume }}_config'
    docker_volume_data: '{{ role_grafana_volume }}_data'
    docker_network: '{{ role_grafana_network }}'
    grafana_tmp_dir: '{{ role_grafana_tmp_dir }}'

- name: Ensure image is pulled
  community.docker.docker_image:
    name: "{{ docker_image }}"
    source: pull
    force_source: yes
  register: pulled

- name: Remove container
  community.docker.docker_container:
    name: "{{ docker_container }}"
    state: absent
  when: pulled.changed

- name: Get infos on container
  community.docker.docker_container_info:
    name: "{{ docker_container }}"
  register: result

- name: Create config volume
  community.docker.docker_volume:
    name: "{{ docker_volume_config }}"

- name: Create data volume
  community.docker.docker_volume:
    name: "{{ docker_volume_data }}"

- name: Create network
  community.docker.docker_network:
    name: "{{ docker_network }}"
    driver_options:
          com.docker.network.bridge.name: "br-{{ docker_network }}"

- name: Create grafana container
  community.docker.docker_container:
    image: "{{ docker_image }}"
    volumes:
     - '{{ docker_volume_config }}:/etc/grafana:Z'
     - '{{ docker_volume_config }}:/var/lib/grafana:Z'
    env:
      TZ: '{{ docker_tz }}'
      LOG_LEVEL: 'debug'
    name: "{{ docker_container }}"
    networks:
     - name: "{{ docker_network }}"
    restart_policy: unless-stopped
    state: started
  when: 
    pulled.changed
    or
    result.exists == false

- name: Create tmp grafana directorys
  ansible.builtin.file:
    path: "{{ grafana_tmp_dir }}/{{ item }}"
    state: directory
  with_items:
    - "config/provisioning/datasources"
    - "config/provisioning/dashboards"
    - "data/dashboards"
  when:
    result.exists == false

- name: Copy grafana datasources providers
  ansible.builtin.template:
    src: "config/provisioning/datasources/{{ item }}.yaml.j2"
    dest: "{{ grafana_tmp_dir }}/config/provisioning/datasources/{{ item }}.yaml"
  with_items:
    - "prometheus"
    - "loki"
  when:
    result.exists == false

- name: Copy grafana dashboard providers
  ansible.builtin.copy:
    src: "config/provisioning/dashboards/"
    dest: "{{ grafana_tmp_dir }}/config/provisioning/dashboards/"
  when:
    result.exists == false

- name: Copy grafana dashboard data
  ansible.builtin.copy:
    src: "data/dashboards/"
    dest: "{{ grafana_tmp_dir }}/data/dashboards/"
  when:
    result.exists == false

- name: Copy grafana config
  ansible.builtin.template:
    src: "grafana.ini.j2"
    dest: "{{ grafana_tmp_dir }}/config/grafana.ini"
  when:
    result.exists == false

- name: Copy config files into grafana container
  shell: docker cp {{ grafana_tmp_dir }}/config/. {{ docker_container }}:/etc/grafana
  when:
    result.exists == false

- name: Copy data files into grafana container
  shell: docker cp {{ grafana_tmp_dir }}/data/. {{ docker_container }}:/var/lib/grafana
  when:
    result.exists == false

- name: Remove tmp directory
  ansible.builtin.file:
    path: "{{ grafana_tmp_dir }}"
    state: absent
  when:
    result.exists == false

- name: Restart container
  community.docker.docker_container:
    name: "{{ docker_container }}"
    restart: yes
  when:
    result.exists == false
