---
- name: Create grafana config volume
  community.docker.docker_volume:
    name: grafana_config

- name: Create grafana data volume
  community.docker.docker_volume:
    name: grafana_data

- name: Ensure grafana/grafana-enterprise image is pulled
  community.docker.docker_image:
    name: docker.io/grafana/grafana-enterprise
    source: pull
    force_source: yes
  register: pulled

- name: Remove grafana container
  community.docker.docker_container:
    name: grafana
    state: absent
  when: pulled.changed

- name: Get infos on grafana container
  community.docker.docker_container_info:
    name: grafana
  register: result

- name: Create grafana container
  community.docker.docker_container:
    image: docker.io/grafana/grafana-enterprise
    mounts:
     - source: grafana_config
       target: /etc/grafana
     - source: grafana_data
       target: /var/lib/grafana
    name: grafana
    networks:
     - name: app-network
    restart_policy: unless-stopped
    state: started
  when:
    pulled.changed
    or
    result.exists == false

- name: Create tmp grafana directorys
  ansible.builtin.file:
    path: "/opt/tmp-grafana/{{ item }}"
    state: directory
  with_items:
    - "config/provisioning/datasources"
    - "config/provisioning/dashboards"
    - "data/dashboards"
  when:
    result.exists == false

- name: Copy grafana datasources providers
  ansible.builtin.template:
    src: "config/provisioning/datasources/{{ item }}.yaml.j2"
    dest: "/opt/tmp-grafana/config/provisioning/datasources/{{ item }}.yaml"
  with_items:
    - "prometheus"
    - "loki"
  when:
    result.exists == false

- name: Copy grafana dashboard providers
  ansible.builtin.copy:
    src: "config/provisioning/dashboards/"
    dest: "/opt/tmp-grafana/config/provisioning/dashboards/"
  when:
    result.exists == false

- name: Copy grafana dashboard data
  ansible.builtin.copy:
    src: "data/dashboards/"
    dest: "/opt/tmp-grafana/data/dashboards/"
  when:
    result.exists == false

- name: Copy config files into grafana container
  shell: docker cp /opt/tmp-grafana/config/. grafana:/etc/grafana
  when:
    result.exists == false

- name: Copy data files into grafana container
  shell: docker cp /opt/tmp-grafana/data/. grafana:/var/lib/grafana
  when:
    result.exists == false

- name: Remove tmp grafana directory
  ansible.builtin.file:
    path: /opt/tmp-grafana
    state: absent
  when:
    result.exists == false

- name: Restart grafana container
  community.docker.docker_container:
    name: grafana
    restart: yes
  when:
    result.exists == false
